name: chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  SOURCE: my_own_github_action
  MIRROR_URL: "EpitechPromo2027/B-DOP-200-PAR-2-1-chocolatine-eric1.xu"
  EXECUTABLES: "choco_test"
  GITHUB_PRIVATE_SSH_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
  CHECK_CODING_STYLE: bash/check.sh
  DISPLAY: bash/display_when_fail.sh
  LAUNCH_CODE: bash/run_docker.sh
  CHECK_BINARY: bash/check_exist.sh
  CHECK_EXECUTION: bash/check_execution.sh

jobs:

  check_coding_style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Launch $CHECK_CODING_STYLE
        run: |
          chmod +x ./$CHECK_CODING_STYLE
          ./$CHECK_CODING_STYLE $(pwd) $(pwd)
      - name: Checking the results
        run: |
          chmod +x ./$DISPLAY
          ./$DISPLAY && exit $? || exit 1

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_coding_style
    if: success()
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Pull Docker image
      run: sudo docker pull epitechcontent/epitest-docker
    - name: Launch code
      run: |
        cat -e main.c
        chmod +x ./$LAUNCH_CODE
        ./$LAUNCH_CODE "make && exit $? || exit 1"
    - name: Clean folder
      run: ./$LAUNCH_CODE "make clean && exit $? || exit 1"
    - name: Check binary
      run: |
        IFS=',' read -ra VARS <<< "${EXECUTABLES}"
        ./$LAUNCH_CODE "chmod +x ./${CHECK_BINARY} && ./${CHECK_BINARY} ${VARS[@]} && exit $? || exit 1"
    - name: Check execution
      run: |
        IFS=',' read -ra VARS <<< "${EXECUTABLES}"
        ./$LAUNCH_CODE "chmod +x ./${CHECK_EXECUTION} && ./${CHECK_EXECUTION} ${VARS[@]} && exit $? || exit 1"

  run_tests:
    runs-on: ubuntu-latest
    needs: check_program_compilation
    if: success()
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Launch unit test
      run: |
        chmod +x ./$LAUNCH_CODE
        ./$LAUNCH_CODE "make tests_run && exit  $? || exit 1"

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    if: success()
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Search key
      run: E=${{ env.GITHUB_PRIVATE_SSH_KEY }} && echo ${#E}
    - name: Push all files to the mirror repository
      uses: pixta-dev/repository-mirroring-action@v1
      with:
        target_repo_url: git@github.com:${{ env.MIRROR_URL }}.git
        ssh_private_key: ${{ env.GITHUB_PRIVATE_SSH_KEY }}
